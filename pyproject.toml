############################
# --- Package Settings --- #
############################

[project]
name = "mlops-prop-mgmt"
description = "Property Management Platform for tracking tenants, properties, payments, and expenses"
authors = [{ name = "Christos", email = "cmagganas@gmail.com" }]
readme = "README.md"
requires-python = ">=3.7"
license = { text = "MIT" }
dependencies = [
    "fastapi>=0.103.0",
    "uvicorn>=0.23.2",
    "sqlalchemy>=2.0.0",
    "pydantic>=2.3.0",
    "python-jose>=3.3.0",
    "python-dotenv>=1.0.0",
    "alembic>=1.12.0",
    "python-multipart>=0.0.6",
    "boto3>=1.28.0",
    "httpx>=0.24.0",
    "asyncpg>=0.28.0",
    "passlib>=1.7.4",
    "requests>=2.31.0",
]
classifiers = ["Programming Language :: Python :: 3"]
keywords = ["property management", "fastapi", "aws"]

# version will be derived dynamically from version.txt via setuptools
dynamic = ["version"]

# docs: https://setuptools.pypa.io/en/latest/userguide/pyproject_config.html#dynamic-metadata
[tool.setuptools.dynamic]
version = { file = "version.txt" }

# optional dependencies can be installed with square brackets, e.g. `pip install my-package[test,static-code-qa]`
[project.optional-dependencies]
test = ["pytest", "pytest-cov", "pytest-asyncio"]
release = ["build", "twine"]
static-code-qa = [
    "pre-commit",
    "pylint",
    "black",
    "isort",
    "flake8",
    "flake8-docstrings",
    "Flake8-pyproject",
    "radon",
]
# Installing dev depenendencies in your virtual env makes it so that during development VS Code can
# - surface linting errors
# - automatically apply formatting
# - show enhanced autocompletion for stubs libraries
# See .vscode/settings.json to see how VS Code is configured to use these tools
dev = ["mlops-prop-mgmt[test,release,static-code-qa]"]

[build-system]
# Minimum requirements for the build system to execute.
requires = ["setuptools>=61.0.0", "wheel"]
build-backend = "setuptools.build_meta"

# include more than only .py files in the distribution package (wheel)
[tool.setuptools.package-data]
mlopspropmgmt = ["*.json"]


##############################
# --- Code Quality Tools --- #
##############################

[tool.pytest.ini_options]
markers = ["slow: marks tests as slow (deselect with '-m \"not slow\"')"]

[tool.black]
line-length = 119
# regular expression ignoring multiple patterns separated by '|' and newlines
exclude = '''
/(
    \.venv
  | venv
)/
'''

[tool.flake8]
docstring-convention = "all"
ignore = [
    "D107", # Missing docstring in __init__
    "D212", # Multi-line docstring summary should start at the first line
    "D213", # Multi-line docstring summary should start at the second line
    "D406", # Section name should end with a newline
    "D407", # Missing dashed underline after section
    "D413", # Missing blank line after last section
    "E501", # Line too long
    "W503", # Line break before binary operator
    "W605", # Invalid escape sequence
    "D203", # 1 blank line required before class docstring
    "D100", # Missing module docstring
    "F541", # F-string without placeholders
    "D417", # Missing argument descriptions in docstring
]
exclude = ["venv"]
max-line-length = 119

# radon
radon-max-cc = 15 # Increase from 10 to 15 temporarily

[tool.isort]
profile = "black"
multi_line_output = "VERTICAL_HANGING_INDENT"
force_grid_wrap = 2
line_length = 119

[tool.pylint."messages control"]
disable = [
    "line-too-long",
    "trailing-whitespace",
    "missing-function-docstring",
    "missing-module-docstring",
    "consider-using-f-string",
    "import-error",
    "too-few-public-methods",
    "redefined-outer-name",
    "redefined-builtin",
    "f-string-without-interpolation",
    "too-many-locals",
    "too-many-statements",
    "no-else-return",
    "unspecified-encoding",
]
